#pragma checksum "D:\github\vaa3d_tools\hackathon\WebVaa3D\WebVaa3d\Views\Home\index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8fc517d4266ace66fa1ab9d6b8f85964e2a15175"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_index), @"mvc.1.0.view", @"/Views/Home/index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/index.cshtml", typeof(AspNetCore.Views_Home_index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\github\vaa3d_tools\hackathon\WebVaa3D\WebVaa3d\Views\_ViewImports.cshtml"
using WebVaa3d;

#line default
#line hidden
#line 2 "D:\github\vaa3d_tools\hackathon\WebVaa3D\WebVaa3d\Views\_ViewImports.cshtml"
using WebVaa3d.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8fc517d4266ace66fa1ab9d6b8f85964e2a15175", @"/Views/Home/index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"28ce9957e88aefaa9c8f03de79939f14ed0d54ba", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 366, true);
            WriteLiteral(@"<script src=""https://unpkg.com/axios/dist/axios.min.js""></script>
<script src=""https://unpkg.com/tiff.js""></script>
<script src=""https://unpkg.com/vue""></script>
<script src=""/statics/UTIF.js""></script>
<script src=""https://unpkg.com/three""></script>
<script src=""/statics/OrbitControls.js""></script>
<script src=""/statics/FirstPersonControls.js""></script>

");
            EndContext();
            BeginContext(366, 469, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e9dbe51624ab42c5b3803269eecf61be", async() => {
                BeginContext(372, 241, true);
                WriteLiteral("\r\n    <div id=\"app\">\r\n        <canvas ref=\"glcanvas\">\r\n            Your browser doesn\'t appear to support the HTML5 <code>&lt;canvas&gt;</code> element.\r\n        </canvas>\r\n        <input v-model=\"id\" placeholder=\"图片文件夹id\">\r\n        <button ");
                EndContext();
                BeginContext(614, 214, true);
                WriteLiteral("@click=\"getPictures\">获取图片</button>\r\n        <div v-for=\"(img,index) in imgs\" :key=\"img._filename\">\r\n            <p>{{img}}</p>\r\n            <canvas-wrapper :img=\"img\"></canvas-wrapper>\r\n        </div>\r\n    </div>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(835, 16468, true);
            WriteLiteral(@"
<script>
    const axios = window.axios;


    var app = new Vue({
        el: '#app',
        components: {
            'canvasWrapper': {
                props: {
                    img: { required: true }
                },
                template: '<div></div>',
                mounted() {
                    this.$el.parentNode.replaceChild(this.img.toCanvas(), this.$el);
                }
            }
        },
        mounted() {
            const canvas = this.$refs.glcanvas;
            // Initialize the GL context
            //console.log('refs', this.$refs)
            const gl = canvas.getContext(""webgl"");


            // Only continue if WebGL is available and working
            if (!gl) {
                alert(""Unable to initialize WebGL. Your browser or machine may not support it."");
                return;
            }

            // Set clear color to black, fully opaque
            gl.clearColor(1.0, 1.0, 1.0, 1.0);
            // Clear the color bu");
            WriteLiteral(@"ffer with specified clear color
            gl.clear(gl.COLOR_BUFFER_BIT);
            this.gl = gl;
        },
        data: {
            imgs: [],
            id: '0',
            gl: null
        },
        methods: {

            async getPictures() {
                const res = await axios.get(`/api/tiff/${+this.id}`)
                    let id = this.id;

                    var files = res.data;
                    console.log(files);

                    renderer = new THREE.WebGLRenderer({ antialias: false });
                    renderer.setSize(window.innerWidth, window.innerHeight);
                    document.body.appendChild(renderer.domElement);
                    //
                    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
                    camera.position.x = 567;
                    camera.position.y = 562;
                    camera.position.z = -659;

                    scene = new THREE.Scene();
      ");
            WriteLiteral(@"              renderer.setClearColor(0x000000, 1.0);

                    for (index in files)
                    //for (i = 0; i <= 5;i++ )
                    {   //index=i;
                        const file = files[index]
                        const response = await axios.get(`/api/tiff/${+id}/${file}`, { responseType: ""arraybuffer"" })


                            var fileName = $(""#file"").val();
                            console.log(file);
                            var regex = /\d+/g;
                            var filestr = file.match(regex);

                            var tiff = new Tiff({ buffer: response.data });
                            var count = tiff.countDirectory();






                            //console.log(count);
                            var j;
                            for (j = 0; j < count; j++) {
                                tiff.setDirectory(j);
                                var buffer = tiff.readRGBAImage();
                       ");
            WriteLiteral(@"         //console.log(tiff.width(),tiff.height());
                                const rgba = new Uint8Array(buffer);

                                var k; var contrast = 12; var thresh = 0;
                                for (k = 0; k < rgba.byteLength; k = k + 4) {
                                    if (rgba[k] < thresh) { rgba[k + 3] = 0; }
                                    rgba[k] *= contrast;
                                    rgba[k + 1] *= contrast;
                                    rgba[k + 2] *= contrast;
                                    if (rgba[k] == 0 && rgba[k + 1] == 0 && rgba[k + 1] == 0)
                                        rgba[k + 3] = 0;

                                }
                                //console.log(filestr[1] / 114560);



                                const gl = this.gl;



                                // A begin
                                var geometry = new THREE.Geometry(); //创建一个空几何体对象
                                ");
            WriteLiteral(@"/**顶点坐标(纹理映射位置)*/


                                var p1 = new THREE.Vector3(0 + filestr[0] / 136960 * tiff.height(), 0 + filestr[1] / 114560 * tiff.width(), j + filestr[2] / 49280 * count); //顶点1坐标
                                var p2 = new THREE.Vector3(0 + filestr[0] / 136960 * tiff.height(), tiff.width() + filestr[1] / 114560 * tiff.width(), j + filestr[2] / 49280 * count); //顶点2坐标
                                var p3 = new THREE.Vector3(tiff.height() + filestr[0] / 136960 * tiff.height(), tiff.width() + filestr[1] / 114560 * tiff.width(), j + filestr[2] / 49280 * count); //顶点3坐标
                                var p4 = new THREE.Vector3(tiff.height() + filestr[0] / 136960 * tiff.height(), 0 + filestr[1] / 114560 * tiff.width(), j + filestr[2] / 49280 * count); //顶点4坐标
                                geometry.vertices.push(p1, p2, p3, p4); //顶点坐标添加到geometry对象



                                /** 三角面1、三角面2*/
                                var normal = new THREE.Vector3(0, 0, 1); //三角面法");
            WriteLiteral(@"向量
                                var face0 = new THREE.Face3(0, 1, 2, normal); //三角面1
                                var face1 = new THREE.Face3(0, 2, 3, normal); //三角面2
                                geometry.faces.push(face0, face1); //三角面1、2添加到几何体
                                /**纹理坐标*/
                                var t0 = new THREE.Vector2(0, 0);//图片左下角
                                var t1 = new THREE.Vector2(1, 0);//图片右下角
                                var t2 = new THREE.Vector2(1, 1);//图片右上角
                                var t3 = new THREE.Vector2(0, 1);//图片左上角
                                uv1 = [t0, t1, t2];//选中图片一个三角区域像素——映射到三角面1
                                uv2 = [t0, t2, t3];//选中图片一个三角区域像素——映射到三角面2
                                geometry.faceVertexUvs[0].push(uv1, uv2);//纹理坐标传递给纹理三角面属性



                                //var texture2 = new THREE.TextureLoader().load( rgba );

                                //console.log(texture2);
                           ");
            WriteLiteral(@"     var texture = new THREE.DataTexture(rgba, tiff.width(), tiff.height(), THREE.RGBAFormat);
                                texture.needsUpdate = true;
                                //console.log(texture);
                                var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });
                                material.transparent = true;
                                //material.opacity = 0.5;
                                material.blending = THREE[""CustomBlending""];
                                material.blendEquation = THREE.MaxEquation;
                                //material.depthWrite = false,
                                //material.depthTest = false,
                                //material.alphaTest = 0.5;

                                var mesh = new THREE.Mesh(geometry, material);






                                scene.add(mesh);
                              

                            }
                  ");
            WriteLiteral(@"          tiff.close();
                       

                    }
                    function render() {
                        renderer.render(scene, camera);
                    }
                    //console.log(scene.children);
                    //scene.children.material.blending = THREE[""CustomBlending""];
                    //scene.children.material.blendEquation = THREE.MaxEquation;
                    render();
                    
                   

                    var raycaster = new THREE.Raycaster();
                    var mouse = new THREE.Vector2();

                    level = 0;

                    tiff_width = [179, 215, 239, 253,253];
                    tiff_height = [213, 244, 244, 253,253];
                    unit_width = [114560, 68800, 38240, 20240,10160];
                    unit_height = [136960, 78080, 39040, 20240,10120];
                    unit_depth = [1, 49280, 32800, 19680,9880];

                    async function onMouseClick(event)");
            WriteLiteral(@" {
                        console.log(camera.position);
                        
                        //通过鼠标点击的位置计算出raycaster所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.

                        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
                        mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;

                        // 通过鼠标点的位置和当前相机的矩阵计算出raycaster
                        raycaster.setFromCamera(mouse, camera);

                        // 获取raycaster直线和所有模型相交的数组集合
                        var intersects = raycaster.intersectObjects(scene.children);

                        zoomin_width = Math.floor(intersects[0].point.x / tiff_height[level] * unit_height[level] / unit_height[level + 1]) * unit_height[level + 1];
                        zoomin_height = Math.floor(intersects[0].point.y / tiff_width[level] * unit_width[level] / unit_width[level + 1]) * unit_width[level + 1];


                        while (scene.children.length > 0) { scene.remove(scene.children[0]); }");
            WriteLiteral(@"
                        const re = await axios.get(`/api/tiff/${+id + level + 1}`)

                       
                            var files = re.data;
                            
                            for (index in files) {
                                const file = files[index]
                                var fileName = $(""#file"").val();

                                var regex = /\d+/g;
                                var filestr = file.match(regex);

                                if (filestr[0] == zoomin_width && filestr[1] == zoomin_height) {
                                    const response = await axios.get(`/api/tiff/${+id + level + 1}/${file}`, { responseType: ""arraybuffer"" })
                                    console.log(fileName);
                                   
                                        var tiff = new Tiff({ buffer: response.data });
                                        var count = tiff.countDirectory();

                          ");
            WriteLiteral(@"              var j;
                                        for (j = 0; j < count; j++) {
                                            tiff.setDirectory(j);
                                            var buffer = tiff.readRGBAImage();
                                            //console.log(tiff.width(),tiff.height());
                                            const rgba = new Uint8Array(buffer);

                                            var k; var contrast = 12; var thresh = 0;
                                            for (k = 0; k < rgba.byteLength; k = k + 4) {
                                                if (rgba[k] < thresh) { rgba[k + 3] = 0; }
                                                rgba[k] *= contrast;
                                                rgba[k + 1] *= contrast;
                                                rgba[k + 2] *= contrast;
                                                if (rgba[k] == 0 && rgba[k + 1] == 0 && rgba[k + 1] == 0)
                 ");
            WriteLiteral(@"                                   rgba[k + 3] = 0;

                                            }

                                            const gl = this.gl;



                                            // A begin
                                            var geometry = new THREE.Geometry(); //创建一个空几何体对象
                                            /**顶点坐标(纹理映射位置)*/


                                            var p1 = new THREE.Vector3(0 + filestr[0] / unit_height[level + 1] * tiff_height[level + 1], 0 + filestr[1] / unit_width[level + 1] * tiff_width[level + 1], j + filestr[2] / unit_depth[level + 1] * count); //顶点1坐标
                                            var p2 = new THREE.Vector3(0 + filestr[0] / unit_height[level + 1] * tiff_height[level + 1], tiff_width[level + 1] + filestr[1] / unit_width[level + 1] * tiff_width[level + 1], j + filestr[2] / unit_depth[level + 1] * count); //顶点2坐标
                                            var p3 = new THREE.Vector3(tiff_height[level + 1]");
            WriteLiteral(@" + filestr[0] / unit_height[level + 1] * tiff_height[level + 1], tiff_width[level + 1] + filestr[1] / unit_width[level + 1] * tiff_width[level + 1], j + filestr[2] / unit_depth[level + 1] * count); //顶点3坐标
                                            var p4 = new THREE.Vector3(tiff_height[level + 1] + filestr[0] / unit_height[level + 1] * tiff_height[level + 1], 0 + filestr[1] / unit_width[level + 1] * tiff_width[level + 1], j + filestr[2] / unit_depth[level + 1] * count); //顶点4坐标
                                            geometry.vertices.push(p1, p2, p3, p4); //顶点坐标添加到geometry对象
                                            //console.log(filestr[0], filestr[1]);
                                            //console.log(p1, p2, p3, p4);



                                            /** 三角面1、三角面2*/
                                            var normal = new THREE.Vector3(0, 0, 1); //三角面法向量
                                            var face0 = new THREE.Face3(0, 1, 2, normal); //三角面1
            ");
            WriteLiteral(@"                                var face1 = new THREE.Face3(0, 2, 3, normal); //三角面2
                                            geometry.faces.push(face0, face1); //三角面1、2添加到几何体
                                            /**纹理坐标*/
                                            var t0 = new THREE.Vector2(0, 0);//图片左下角
                                            var t1 = new THREE.Vector2(1, 0);//图片右下角
                                            var t2 = new THREE.Vector2(1, 1);//图片右上角
                                            var t3 = new THREE.Vector2(0, 1);//图片左上角
                                            uv1 = [t0, t1, t2];//选中图片一个三角区域像素——映射到三角面1
                                            uv2 = [t0, t2, t3];//选中图片一个三角区域像素——映射到三角面2
                                            geometry.faceVertexUvs[0].push(uv1, uv2);//纹理坐标传递给纹理三角面属性



                                            //var texture2 = new THREE.TextureLoader().load( rgba );

                                            //console.l");
            WriteLiteral(@"og(texture2);
                                            var texture = new THREE.DataTexture(rgba, tiff.width(), tiff.height(), THREE.RGBAFormat);

                                            texture.needsUpdate = true;
                                            //console.log(texture);
                                            var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });
                                            material.transparent = true;
                                            //material.blending = THREE[ ""MultiplyBlending""];
                                            //material.depthWrite = false,
                                            //material.depthTest = false,
                                            material.blending = THREE[""CustomBlending""];
                                            material.blendEquation = THREE.MaxEquation;

                                            var mesh = new THREE.Mesh(geometry, material);



");
            WriteLiteral(@"


                                            scene.add(mesh);

                                        }
                                        tiff.close();
                                        render();
                                    
                                }
                            }
                        
                        level = level + 1;
                        //camera.position = (p1 + p2 + p3 + p4) / 2;
                        //camera.position.z = -1 * camera.position.z;
                        console.log(camera.position);
                        camera.lookAt(intersects[0].point);
                    }





                    window.addEventListener('dblclick', onMouseClick, false);
                    var controls = new THREE.OrbitControls(camera);//创建控件对象
                    controls.addEventListener('change', render);//监听鼠标、键盘事件





                    // handle success
                    // this.imgs.push(new Tiff({ buffer: re");
            WriteLiteral("sponse.data }))\r\n\r\n\r\n                \r\n            }\r\n        }\r\n    })\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
